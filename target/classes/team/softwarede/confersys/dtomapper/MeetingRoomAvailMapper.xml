<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="team.softwarede.confersys.dtomapper.MeetingRoomAvailMapper">
  <resultMap id="BaseResultMap" type="team.softwarede.confersys.dto.MeetingRoomAvail">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed May 29 09:02:50 CST 2019.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="room_number" jdbcType="VARCHAR" property="roomNumber" />
    <result column="building" jdbcType="VARCHAR" property="building" />
    <result column="floor" jdbcType="INTEGER" property="floor" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed May 29 09:02:50 CST 2019.
    -->
    id, room_number, building, floor
  </sql>
  <select id="selectBookAvailList" resultMap="BaseResultMap">
  <!-- 根据开始时间、结束时间、设备列表、容量查询可选用的会议室列表 -->
		      select 
        <include refid="Base_Column_List" />
        from meeting_room
        where id in (
        select tab1.meeting_room_id from(
        select equipment_id,meeting_room_id,equipment_type_id
        from equipment 
        where meeting_room_id in(
            select t2.id from(
                (   
                    select id
                    from meeting_room
                    where id not in (
                        select DISTINCT s.meeting_room_id
                        from `schedule` s INNER JOIN meeting mt
                        on s.meeting_id = mt.id
                        where 
                            mt.apply_status_id="${applyStatusId}" and 
                            (  end_time between #{beginTime,jdbcType=TIMESTAMP} and #{endTime,jdbcType=TIMESTAMP})  
                            or
                            (  begin_time between #{beginTime,jdbcType=TIMESTAMP} and #{endTime,jdbcType=TIMESTAMP})  
                            or
                            ( begin_time &lt; #{beginTime,jdbcType=TIMESTAMP} and 
                              end_time &gt; #{endTime,jdbcType=TIMESTAMP}  )
                    )
                ) AS t1
                INNER JOIN
                (   select mtr.id
                    from meeting_room mtr
                    where capacity &gt;= ${capacity}
                ) AS t2 
                ON t1.id=t2.id
            )
        )
    ) as tab1
    RIGHT JOIN(
       select id
        from equipment_type et
        where et.id in 
        <foreach collection="typeIdlist" index="index" item="typeId" open="("
            separator="," close=")">
            ${typeId}
        </foreach>
        
    ) as tab2
    ON tab1.equipment_type_id=tab2.id
    GROUP BY tab1.meeting_room_id
    having count(tab1.meeting_room_id)=count(tab2.id)
    )
  </select>


</mapper>